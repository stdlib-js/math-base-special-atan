{
  "version": 3,
  "sources": ["../lib/polyval_p.js", "../lib/polyval_q.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn -64.85021904942025;\n\t}\n\treturn -64.85021904942025 + (x * (-122.88666844901361 + (x * (-75.00855792314705 + (x * (-16.157537187333652 + (x * -0.8750608600031904))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 194.5506571482614;\n\t}\n\treturn 194.5506571482614 + (x * (485.3903996359137 + (x * (432.88106049129027 + (x * (165.02700983169885 + (x * (24.858464901423062 + (x * 1.0))))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright 1984, 1995, 2000 by Stephen L. Moshier\n*\n* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.\n*\n* Stephen L. Moshier\n* moshier@na-net.ornl.gov\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar PIO2 = require( '@stdlib/constants-float64-half-pi' );\nvar PIO4 = require( '@stdlib/constants-float64-fourth-pi' );\nvar NINF = require( '@stdlib/constants-float64-ninf' );\nvar polyvalP = require( './polyval_p.js' );\nvar polyvalQ = require( './polyval_q.js' );\n\n\n// VARIABLES //\n\nvar MOREBITS = 6.123233995736765886130e-17; // pi/2 = PIO2 + MOREBITS.\nvar T3P8 = 2.41421356237309504880; // tan( 3*pi/8 )\n\n\n// MAIN //\n\n/**\n* Computes the arctangent of a double-precision floating-point number.\n*\n* ## Method\n*\n* -   Range reduction is from three intervals into the interval from 0 to 0.66. The approximant uses a rational function of degree 4/5 of the form\n*\n*     ```tex\n*     x + x^3 \\frac{P(x)}{Q(x)}\n*     ```\n*\n* ## Notes\n*\n* -   Relative error:\n*\n*     | arithmetic | domain  | # trials | peak    | rms     |\n*     |:-----------|:--------|:---------|:--------|:--------|\n*     | DEC        | -10, 10 | 50000    | 2.4e-17 | 8.3e-18 |\n*     | IEEE       | -10, 10 | 10^6     | 1.8e-16 | 5.0e-17 |\n*\n* @param {number} x - input value\n* @returns {number} arctangent (in radians)\n*\n* @example\n* var v = atan( 0.0 );\n* // returns ~0.0\n*\n* @example\n* var PI = require( '@stdlib/constants-float64-pi' );\n*\n* var v = atan( -PI/4.0 );\n* // returns ~-0.666\n*\n* @example\n* var PI = require( '@stdlib/constants-float64-pi' );\n*\n* var v = atan( PI/4.0 );\n* // returns ~0.666\n*\n* @example\n* var v = atan( NaN );\n* // returns NaN\n*/\nfunction atan( x ) {\n\tvar flg;\n\tvar sgn;\n\tvar y;\n\tvar z;\n\tif ( isnan( x ) || x === 0.0 ) {\n\t\treturn x;\n\t}\n\tif ( x === PINF ) {\n\t\treturn PIO2;\n\t}\n\tif ( x === NINF ) {\n\t\treturn -PIO2;\n\t}\n\tif ( x < 0.0 ) {\n\t\tsgn = true;\n\t\tx = -x;\n\t}\n\t// Range reduction:\n\tflg = 0;\n\tif ( x > T3P8 ) {\n\t\ty = PIO2;\n\t\tflg = 1;\n\t\tx = -( 1.0/x );\n\t} else if ( x <= 0.66 ) {\n\t\ty = 0.0;\n\t} else {\n\t\ty = PIO4;\n\t\tflg = 2;\n\t\tx = (x-1.0) / (x+1.0);\n\t}\n\tz = x * x;\n\tz = z*polyvalP( z ) / polyvalQ( z );\n\tz = ( x*z ) + x;\n\tif ( flg === 2 ) {\n\t\tz += 0.5 * MOREBITS;\n\t} else if ( flg === 1 ) {\n\t\tz += MOREBITS;\n\t}\n\ty += z;\n\treturn ( sgn ) ? -y : y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = atan;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the arctangent of a double-precision floating-point number.\n*\n* @module @stdlib/math-base-special-atan\n*\n* @example\n* var PI = require( '@stdlib/constants-float64-pi' );\n* var atan = require( '@stdlib/math-base-special-atan' );\n*\n* var v = atan( 0.0 );\n* // returns ~0.0\n*\n* v = atan( -PI/4.0 );\n* // returns ~-0.666\n*\n* v = atan( PI/4.0 );\n* // returns ~0.666\n*\n* v = atan( NaN );\n* // returns NaN\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAoCA,SAASC,EAAUC,EAAI,CACtB,OAAKA,IAAM,EACH,mBAED,mBAAsBA,GAAK,oBAAuBA,GAAK,mBAAsBA,GAAK,oBAAuBA,EAAI,qBACrH,CAKAF,EAAO,QAAUC,IC9CjB,IAAAE,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAoCA,SAASC,EAAUC,EAAI,CACtB,OAAKA,IAAM,EACH,kBAED,kBAAqBA,GAAK,kBAAqBA,GAAK,mBAAsBA,GAAK,mBAAsBA,GAAK,mBAAsBA,EAAI,KAC5I,CAKAF,EAAO,QAAUC,IC9CjB,IAAAE,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAoCA,IAAIC,EAAQ,QAAS,iCAAkC,EACnDC,EAAO,QAAS,gCAAiC,EACjDC,EAAO,QAAS,mCAAoC,EACpDC,EAAO,QAAS,qCAAsC,EACtDC,EAAO,QAAS,gCAAiC,EACjDC,EAAW,IACXC,EAAW,IAKXC,EAAW,qBACXC,EAAO,kBAgDX,SAASC,EAAMC,EAAI,CAClB,IAAIC,EACAC,EACAC,EACAC,EACJ,OAAKd,EAAOU,CAAE,GAAKA,IAAM,EACjBA,EAEHA,IAAMT,EACHC,EAEHQ,IAAMN,EACH,CAACF,GAEJQ,EAAI,IACRE,EAAM,GACNF,EAAI,CAACA,GAGNC,EAAM,EACDD,EAAIF,GACRK,EAAIX,EACJS,EAAM,EACND,EAAI,EAAG,EAAIA,IACAA,GAAK,IAChBG,EAAI,GAEJA,EAAIV,EACJQ,EAAM,EACND,GAAKA,EAAE,IAAQA,EAAE,IAElBI,EAAIJ,EAAIA,EACRI,EAAIA,EAAET,EAAUS,CAAE,EAAIR,EAAUQ,CAAE,EAClCA,EAAMJ,EAAEI,EAAMJ,EACTC,IAAQ,EACZG,GAAK,GAAMP,EACAI,IAAQ,IACnBG,GAAKP,GAENM,GAAKC,EACIF,EAAQ,CAACC,EAAIA,EACvB,CAKAd,EAAO,QAAUU,IClGjB,IAAIM,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_polyval_p", "__commonJSMin", "exports", "module", "evalpoly", "x", "require_polyval_q", "__commonJSMin", "exports", "module", "evalpoly", "x", "require_main", "__commonJSMin", "exports", "module", "isnan", "PINF", "PIO2", "PIO4", "NINF", "polyvalP", "polyvalQ", "MOREBITS", "T3P8", "atan", "x", "flg", "sgn", "y", "z", "main"]
}
